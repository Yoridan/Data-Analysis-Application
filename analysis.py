import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO


def load_data(file):
    if file is None:
        return None
    if file.name.endswith(".csv"):
        return pd.read_csv(file)
    elif file.name.endswith(".xlsx"):
        return pd.read_excel(file, engine='openpyxl')
    elif file.name.endswith(".json"):
        return pd.read_json(file)
    else:
        st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON.")
        return None


st.title("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "json"])
df = load_data(uploaded_file)

if df is not None:
    numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
    selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", numeric_columns, default=numeric_columns)

    if not selected_columns:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü!")
    else:
        df = df[selected_columns]

if uploaded_file and df is not None:
    st.write("### –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
    st.dataframe(df.head())

    st.write("### –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    st.write(df.describe())

    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(label="üíæ –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                       data=csv,
                       file_name="processed_data.csv",
                       mime="text/csv")

    st.write("### –í—ã–±–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞:")
    chart_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", [
        "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
        "–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ (Boxplot)", "–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Scatter Plot)",
        "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"
    ])

    numeric_columns = df.select_dtypes(include=['number']).columns.tolist()

    if chart_type in ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ (Boxplot)"]:
        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É", numeric_columns)

    elif chart_type in ["–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Scatter Plot)", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"]:
        x_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è X", numeric_columns)
        y_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è Y", numeric_columns)

    plt.figure(figsize=(8, 5))

    if chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        sns.histplot(df[column], bins=20, kde=True)
        plt.xlabel(column)
        plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        plt.title(f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {column}")

    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        plt.plot(df[column])
        plt.xlabel("–ò–Ω–¥–µ–∫—Å")
        plt.ylabel(column)
        plt.title(f"–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: {column}")

    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        value_counts = df[column].value_counts()
        if len(value_counts) <= 10:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–Ω–∞—á–µ–Ω–∏–π
            value_counts.plot.pie(autopct='%1.1f%%')
            plt.title(f"–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {column}")
        else:
            st.warning("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã!")

    elif chart_type == "–Ø—â–∏–∫ —Å —É—Å–∞–º–∏ (Boxplot)":
        sns.boxplot(y=df[column])
        plt.ylabel(column)
        plt.title(f"–Ø—â–∏–∫ —Å —É—Å–∞–º–∏: {column}")

    elif chart_type == "–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Scatter Plot)":
        sns.scatterplot(x=df[x_col], y=df[y_col])
        plt.xlabel(x_col)
        plt.ylabel(y_col)
        plt.title(f"–¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {x_col} vs {y_col}")

    elif chart_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏":
        sns.kdeplot(x=df[x_col], y=df[y_col], cmap="Blues", fill=True)
        plt.xlabel(x_col)
        plt.ylabel(y_col)
        plt.title(f"–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏: {x_col} vs {y_col}")

    elif chart_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏":
        plt.figure(figsize=(10, 6))
        sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
        plt.title("–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

    st.pyplot(plt)

    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    st.download_button(label="üíæ –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", data=buf, file_name="chart.png", mime="image/png")
